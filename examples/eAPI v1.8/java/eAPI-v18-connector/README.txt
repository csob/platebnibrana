Requirements: 
- installed jdk 1.8
- installed maven 3

1. download and unzip or clone git repository with java plugin for CSOB payment gateway
   (https://github.com/csob/paymentgateway)

2. goto current directory where pom.xml is located and run "mvn package"

3. configure config/application.properties
   a. setup url of CSOB payment gateway for given environment, i.e. for integration environment set to value
      native.api.url=https://iapi.iplatebnibrana.csob.cz

   b. setup path to public key of CSOB payment gateway, e.g.
      mips.public.key.filename=config/mips_iplatebnibrana.csob.cz.pub

   c. setup merchant ID (assigned by CSOB), e.g.
      merchant.id=M1MIPSXXXX

   d. setup path to merchant private key (key generated by https://iplatebnibrana.csob.cz/keygen tool), e.g.
      merchant.private.key.filename=config/M1MIPSXXXX.key

4. run "run.bat" on windows or "run.sh" on linux (default "echo via GET method" is executed)

5. for others operations use following params ...

	echo via POST method

	  run.bat -m ECHO_POST 
	  run.sh  -m ECHO_POST 

	payment init (standard payment)

	  run.bat -m PAYMENT_INIT -i config/payment-init-base.json
	  run.sh  -m PAYMENT_INIT -i config/payment-init-base.json

	payment init (oneclick template)

	  run.bat -m PAYMENT_INIT -i config/payment-init-oneclick-base.json
	  run.sh  -m PAYMENT_INIT -i config/payment-init-oneclick-base.json

	payment init (custom payment)

	  run.bat -m PAYMENT_INIT -i config/payment-init-custom-base.json
	  run.sh  -m PAYMENT_INIT -i config/payment-init-custom-base.json

	payment process

	  run.bat -m PAYMENT_PROCESS -p <pay-id-from-previous-payment-init-call>
	  run.sh  -m PAYMENT_PROCESS -p <pay-id-from-previous-payment-init-call>

	payment status

	  run.bat -m PAYMENT_STATUS -p <pay-id-from-previous-payment-init-call>
	  run.sh  -m PAYMENT_STATUS -p <pay-id-from-previous-payment-init-call>

	payment close

	  run.bat -m PAYMENT_CLOSE -p <pay-id-from-previous-payment-init-call>
	  run.sh  -m PAYMENT_CLOSE -p <pay-id-from-previous-payment-init-call>

	  or for close to lower amount use -a param to specify totalAmount for payment/close:

	  run.bat -m PAYMENT_CLOSE -p <pay-id-from-previous-payment-init-call> -a 1000
	  run.sh  -m PAYMENT_CLOSE -p <pay-id-from-previous-payment-init-call> -a 1000

	payment reverse

	  run.bat -m PAYMENT_REVERSE -p <pay-id-from-previous-payment-init-call>
	  run.sh  -m PAYMENT_REVERSE -p <pay-id-from-previous-payment-init-call>

	payment refund

	  run.bat -m PAYMENT_REFUND -p <pay-id-from-previous-payment-init-call>
	  run.sh  -m PAYMENT_REFUND -p <pay-id-from-previous-payment-init-call>

	  or for partial refund use -a param to specify amount for partial refund:

	  run.bat -m PAYMENT_REFUND -p <pay-id-from-previous-payment-init-call> -a 1000
	  run.sh  -m PAYMENT_REFUND -p <pay-id-from-previous-payment-init-call> -a 1000

	oneclick echo

	  run.bat -m ONECLICK_ECHO -x <orig-pay-id>
	  run.sh  -m ONECLICK_ECHO -x <orig-pay-id>

	oneclick init

	  run.bat -m ONECLICK_INIT -o config/oneclick-init-base.json
	  run.sh  -m ONECLICK_INIT -o config/oneclick-init-base.json

	oneclick start

	  run.bat -m ONECLICK_START -p <pay-id-from-previous-oneclick-init-call>
	  run.sh  -m ONECLICK_START -p <pay-id-from-previous-oneclick-init-call>

	echo customer 

	  run.bat -m ECHO_CUSTOMER -c <customer-id>
	  run.sh  -m ECHO_CUSTOMER -c <customer-id>
